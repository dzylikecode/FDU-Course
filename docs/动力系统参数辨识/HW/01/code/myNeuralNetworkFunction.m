function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 31-Mar-2024 21:58:20.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.00609040417954033;-0.0980916393482856];
x1_step1.gain = [148.033759484411;9.92915287749107];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.5698553727026776095;2.0158418209881800998;-6.0629918752896800882;-5.0319956246861972105;-1.3854523727726490989;-3.2909342590516579286;-0.50970929868545133967;0.40289029168813478288;-0.87547628897250562297;0.38519454620429827152;2.4422591737514394161;3.1026450155612357307;6.6119391307031305516;3.937710563630019589;9.1740079154878664269];
IW1_1 = [-6.2622471691242331815 0.93346988653372409139;-1.2286839208216107089 -1.2470774986849808563;5.6924931961734328567 3.0279196140812367766;1.3244229920439480885 5.707431706040501318;10.788233390548709778 -3.4345090655180636752;0.79462692162982495603 7.0917923999249188327;-6.2264714597773478388 -3.3974879943539200156;4.3890302998088328579 -6.3253317701185851618;-14.048080466336070771 0.20638855095184252542;3.5870973041878744247 -5.2304631280345095234;9.0028905360980360228 -4.2720067234791923028;6.0590921426692556651 0.75509814282850640232;7.2842358222055185735 1.1509286689687372451;4.5152252079220884795 -4.3582670003796124547;8.3765286088110642027 2.0368155520693620453];

% Layer 2
b2 = 1.3728965213413659718;
LW2_1 = [-0.3086018329028519247 4.0178184415891973202 0.54421003223214692301 0.90615635351056189606 0.15591858389440532706 0.3384785547242332715 0.30712025788756391886 -1.9846755159184863437 0.19782539769956222764 2.1740648108433373586 0.1976296254370124017 -0.27500850099735058008 0.86113642582795557612 0.3725164003974887339 -4.2568967165805213781];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.413955536467042;
y1_step1.xoffset = -2.42617827916503;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
